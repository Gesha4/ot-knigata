//Даден е лабиринт, който се състои от N x N квадратчета, всяко от които може да е проходимо (0) или не (x). В едно от 
//квадратчетата се намира нашият герой Минчо (*): 
//x x x x x x
//0 x 0 0 0 x 
//x * 0 x 0 x
//x x x x 0 x
//0 0 0 0 0 x
//0 x x x 0 x
//Две квадратчета са съседни, ако имат обща стена. Минчо може на една стъпка да преминава от едно проходимо квадратче в съседно
//на него проходимо квадратче. Ако Минчо стъпи в клетка, която е на границата на лабиринта, той може с една стъпка да излезе извън
//него. Напишете програма, която по даден лабиринт отпечатва минималния брой стъпки, необходими на Минчо, за да излезе от лабиринта
//или -1 ако няма изход. Входните данни се четат от текстов файл с име Problem2.in. На първия ред във файла стои числото N 
//(2 < N < 100). На следващите N реда стоят по N символа, всеки от които е или "0" или "x" или "*". Изходът представлява едно
//число и трябва да се изведе във файла Problem2.out.
import java.io.*;
import java.util.*;

public class zadachi {

	public static class Maze {
		private static final String INPUT_FILE_NAME = "Problem2.in";
		private static final String OUTPUT_FILE_NAME = "Problem2.out";

		private class Cell {
			int row;
			int col;
			int distance;

			public Cell(int row, int col, int distance) {
				this.row = row;
				this.col = col;
				this.distance = distance;
			}
		}

		private char[][] maze;
		private int size;
		private Cell startCell = null;

		public void readFromFile(String fileName) throws FileNotFoundException {
			Scanner scanner = new Scanner(new File(fileName));
			try {
				this.size = scanner.nextInt();
				scanner.nextLine();
				this.maze = new char[this.size][this.size];
				for (int row = 0; row < this.size; row++) {
					String line = scanner.nextLine();
					for (int col = 0; col < line.length(); col++) {
						char ch = line.charAt(col);
						maze[row][col] = ch;
						if (ch == '*') {
							this.startCell = new Cell(row, col, 0);
						}
					}
				}
			} finally {
				scanner.close();
			}
		}

		public int findShortestPath(Cell startCell) {
			if (startCell == null) {
				return -1;
			}
			Queue<Cell> visitedCells = new LinkedList<Cell>();
			visitCell(visitedCells, startCell.row, startCell.col, 0);
			while (!visitedCells.isEmpty()) {
				Cell currentCell = visitedCells.remove();
				int row = currentCell.row;
				int col = currentCell.col;
				int distance = currentCell.distance;
				if ((row == 0) || (row == size - 1) || (col == 0) || (col == size - 1)) {
					return distance + 1;
				}
				visitCell(visitedCells, row, col + 1, distance + 1);
				visitCell(visitedCells, row, col - 1, distance + 1);
				visitCell(visitedCells, row + 1, col, distance + 1);
				visitCell(visitedCells, row - 1, col, distance + 1);
			}
			return -1;
		}

		private void visitCell(Queue<Cell> visitedCells, int row, int col, int distance) {
			if (maze[row][col] != 'x') {
				maze[row][col] = 'x';
				Cell cell = new Cell(row, col, distance);
				visitedCells.add(cell);
			}
		}

		public void saveResult(String fileName, int result) throws IOException {
			FileWriter writer = new FileWriter(fileName);
			try {
				writer.write("" + result);
			} finally {
				writer.close();
			}
		}

		public static void main(String[] args) throws IOException {
			Maze maze = new Maze();
			maze.readFromFile(INPUT_FILE_NAME);
			int pathLength = maze.findShortestPath(maze.startCell);
			maze.saveResult(OUTPUT_FILE_NAME, pathLength);
		}
	}
}
